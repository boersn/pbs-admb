s/\&\([a-zA-Z]*\)\[\([a-zA-Z0-9 \+\*]*\) \+ 1\]/\1(\2+1,\1.indexmax())/g
#s/\&\([a-zA-Z]*\)\[\([a-zA-Z0-9 \+\*]*\) \+ 1\]/\1(\2,\1.indexmax())/g

/typedef char \*address;/d
s/&\([a-zA-Z]*\)\[1\]/\1/g
s/doublereal \*/dvar_vector \& /g
s/doublereal \([a-zA-Z]\)/dvariable \1/g
#s/double sqrt(doublereal);/dvariable& sqrt(prevariable&);/
s/dvariable e_2\[3\];/double e_2[3];/
s/dvariable d;/double d;/
s/doublecomplex z;/\/\/doublecomplex z;/
s/double sqrt(doublereal);//
s/int daxpy_(integer \*n, dvar_vector \& da, dvar_vector \& dx, integer \*incx, dvar_vector \& dy, integer \*incy)/\
int daxpy_(integer *n, dvariable* da,const dvar_vector \& dx, integer *incx, const dvar_vector \& dy, integer *incy)/
s/int lbfgs_(integer \*n, integer \*m, dvar_vector \& x, dvar_vector \& f, dvar_vector \& g, logical \*diagco, dvar_vector \& diag, integer \*iprint, dvar_vector \& eps, dvar_vector \& xtol, dvar_vector \& w, integer \*iflag, integer\* iter)/int lbfgs_(integer \*n, integer \*m, dvar_vector \& x, dvariable \& f, dvar_vector \& g, logical \*diagco, dvar_vector \& diag, integer \*iprint, double*  eps, double*  xtol, dvar_vector \& w, integer \*iflag, integer\* iter)/
s/static dvariable ftol;/static double ftol;/
s/int mcsrch_(integer \*n, dvar_vector \& x, dvar_vector \& f, dvar_vector \& g, dvar_vector \& s, dvar_vector \& stp, dvar_vector \& ftol, dvar_vector \& xtol, integer \*maxfev, integer \*info, integer \*nfev, dvar_vector \& wa)/int mcsrch_(integer \*n, dvar_vector \& x, dvariable * f, dvar_vector \& g, dvar_vector \& s, dvariable * stp, double * ftol, double * xtol, integer \*maxfev, integer \*info, integer \*nfev, dvar_vector \& wa)/
s/int mcstep_(dvar_vector \& stx, dvar_vector \& fx, dvar_vector \& dx, dvar_vector \& sty, dvar_vector \& fy, dvar_vector \& dy, dvar_vector \& stp, dvar_vector \& fp, dvar_vector \& dp, logical \*brackt, dvar_vector \& stpmin, dvar_vector \& stpmax, integer \*info)/int mcstep_(dvariable * stx, dvariable * fx, dvariable * dx, dvariable * sty, dvariable * fy, dvariable * dy, dvariable * stp, dvariable * fp, dvariable * dp, logical \*brackt, dvariable * stpmin, dvariable * stpmax, integer \*info)/
s/dvariable ddot_(integer \*n, dvar_vector \& dx, integer \*incx, dvar_vector \& dy, integer \*incy);/dvariable ddot_(integer \*n,const dvar_vector \& dx, integer \*incx,const dvar_vector \& dy, integer \*incy);/
s/dvariable ddot_(integer \*n, dvar_vector \& dx, integer \*incx, dvar_vector \& dy, integer \*incy)/dvariable ddot_(integer \*n,const dvar_vector \& dx, integer \*incx,const dvar_vector \& dy, integer \*incy)/
s/daxpy_2(integer \* n, dvariable \*, dvar_vector\& w,integer \* ,dvar_vector\& w1, integer\* );/daxpy_2(integer \* n, dvariable \*, const dvar_vector\& w,integer \* ,const dvar_vector\& w1, integer\* );/
s/daxpy_(integer \*n, dvariable\* da, dvar_vector \& dx, integer \*incx, dvar_vector\& dy, integer \*incy);/daxpy_(integer \*n, dvariable\* da,const dvar_vector \& dx, integer \*incx,const dvar_vector\& dy, integer \*incy);/
s/--wa/wa.shift(1)/
s/--dx/dx.shift(1)/
s/--dy/dy.shift(1)/
s/--diag/diag.shift(1)/
s/--g/g.shift(1)/
s/--x/x.shift(1)/
s/--w/w.shift(1)/
s/--s/s.shift(1)/
s/mcsrch_(n, x, f, g,/mcsrch_(n, x, \&f, g,/
s/dvariable gtol, stpmin, stpmax;/double gtol, stpmin, stpmax;/
s/\*stp = max(\*stp,lb3_1.stpmin);/\*stp = fmax(\*stp,lb3_1.stpmin);/
s/\*stp = min(\*stp,lb3_1.stpmax);/\*stp = fmin(\*stp,lb3_1.stpmax);/
s/lb3_/lb4_/g
s/lbfgs_/xlbfgs_/g
s/ddot_/xddot_/g
s/daxpy_/xdaxpy_/g
s/mcsrch_/xmcsrch_/g
s/lb1_/xlb1_/g
s/mcstep_/xmcstep_/g
